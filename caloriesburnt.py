# -*- coding: utf-8 -*-
"""CaloriesBurnt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ACGPaQbd1Bh8gHCPDmHzdy_Hx6t01W3j

CALORIES BURNT PREDICTER

Importing the Dependencies
"""

import numpy as np  # make arrays
import pandas as pd  # make dataframes (structured tables)
import matplotlib.pyplot as plt  # used for creating plots
import seaborn as sns  # used to make plots and graphs
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics  # used to evaluate model

"""Data processing"""

# loading from csv to pandas
calories = pd.read_csv('/content/calories.csv')
exercise = pd.read_csv('/content/exercise.csv')

calories.head(5)

exercise.head(5)

"""Combining the 2 data sets"""

calories_data = pd.concat([exercise, calories['Calories']], axis=1)

calories_data.head(5)

calories_data.shape

calories_data.info()

# checking for missing values
calories_data.isnull().sum()

"""Data Analysis"""

# statistical values of the data set
calories_data.describe()

"""Data visualization"""

sns.set(style='dark')

sns.countplot(x = 'Gender', data = calories_data)

# Create a 3x2 grid for subplots
fig, axes = plt.subplots(3, 2, figsize=(10, 10))

# Adjust layout
fig.tight_layout(pad=5.0)

# Plot each distribution in a subplot
sns.histplot(calories_data['Age'], ax=axes[0, 0], kde=True)
sns.histplot(calories_data['Height'], ax=axes[0, 1], kde=True)
sns.histplot(calories_data['Weight'], ax=axes[1, 0], kde=True)
sns.histplot(calories_data['Duration'], ax=axes[1, 1], kde=True)
sns.histplot(calories_data['Heart_Rate'], ax=axes[2, 0], kde=True)
sns.histplot(calories_data['Body_Temp'], ax=axes[2, 1], kde=True)

calories_data = calories_data.drop(columns=['User_ID'], axis=1) # this is not required as feature

# used to understand specified colomn into binary dummy variables to vizualise the data
# drop_first helps in reducing collinearilty
#calories_data_1 = pd.get_dummies(calories_data, columns = ['Gender'], drop_first=True)

calories_data.replace({'Gender':{'male':0,'female':1}}, inplace=True)
# this is done because the genders colmn is a string type and we wnat int64 type for correlation

correlation = calories_data.corr()
calories_data.head(5)

# heatmap for correlation

plt.figure(figsize=(10,10))
#sns.heatmap(correlation)
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':10}, cmap='Blues')

# correlation between the features
# if negative value then negative correlation
# if positive value then positive correlation

"""Features and Targets"""

X = calories_data.drop(columns=['Calories'], axis=1)
Y = calories_data['Calories']

"""Training and validation Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=27)

X_train.shape, X_test.shape, Y_train.shape, Y_test.shape

"""Model Training"""

#model = XGBRegressor(learning_rate= 0.2, reg_alpha=1, reg_lambda=1)

from keras.layers import Dense
from keras.models import Sequential

model = Sequential([
    Dense(12, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(6, activation='relu'),
    Dense(3, activation='relu'),
    Dense(1, activation= 'linear')
])

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(X_train, Y_train, epochs=5)

"""Model evaluation"""

data_prediction = model.predict(X_test)

mae = metrics.mean_absolute_error(Y_test, data_prediction)
print("Mean absolute error: ", mae)

mse = metrics.mean_squared_error(Y_test, data_prediction)
rmse = np.sqrt(mse)
print("Root mean squared error: ", rmse)

r_sq = metrics.r2_score(Y_test, data_prediction)
print("R-squared score: ", r_sq)

